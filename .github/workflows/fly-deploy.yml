name: Deploy to Fly.io

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    name: Build and Deploy to Fly.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Check FLY_API_TOKEN is present
        run: |
          if [ -z "${FLY_API_TOKEN}" ]; then
            echo "::error::Missing FLY_API_TOKEN GitHub secret. Add it in Settings > Secrets and variables > Actions";
            exit 1;
          fi

      - name: Locate fly.toml and export APP_NAME
        id: find_config
        run: |
          if [ -f "fly.toml" ]; then
            echo "CONFIG=fly.toml" >> $GITHUB_ENV
            APP_NAME=$(awk -F '"' '/^app\s*=/{print $2}' fly.toml)
          elif [ -f "webapp-laravel/fly.toml" ]; then
            echo "CONFIG=webapp-laravel/fly.toml" >> $GITHUB_ENV
            APP_NAME=$(awk -F '"' '/^app\s*=/{print $2}' webapp-laravel/fly.toml)
          else
            echo "::error::fly.toml introuvable Ã  la racine ni dans webapp-laravel/"; exit 1
          fi
          if [ -z "$APP_NAME" ]; then
            echo "::error::Impossible de lire 'app' dans fly.toml"; exit 1
          fi
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_URL=https://$APP_NAME.fly.dev" >> $GITHUB_ENV

      - name: Ensure Fly app exists
        run: |
          # If app doesn't exist, create it (apps show exits non-zero if missing)
          if ! flyctl apps show ${APP_NAME} >/dev/null 2>&1; then
            flyctl apps create ${APP_NAME}
          fi

      - name: Ensure APP secrets on Fly
        run: |
          # Generate a Laravel-compatible base64 key (32 bytes)
          APP_KEY_B64=$(openssl rand -base64 32)
          # Set/update essential secrets (idempotent)
          flyctl secrets set \
            APP_KEY=base64:${APP_KEY_B64} \
            APP_ENV=production \
            APP_DEBUG=false \
            APP_URL=${APP_URL} \
            --app ${APP_NAME} --detach

      - name: Deploy to Fly.io
        run: |
          # Deploy using the Dockerfile and the resolved fly.toml
          flyctl deploy --remote-only --app ${APP_NAME} --config "${CONFIG}"

      - name: Run migrations and storage link
        if: success()
        run: |
          # Run Laravel maintenance commands on the machine
          flyctl ssh console --app ${APP_NAME} -C "php artisan migrate --force || true"
          flyctl ssh console --app ${APP_NAME} -C "php artisan storage:link || true"
